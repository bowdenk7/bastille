// Generated by CoffeeScript 1.10.0
(function() {
  var _,
    slice = [].slice;

  _ = require('lodash');

  module.exports = {
    isA: function(type) {
      return {
        __matches: function(actual) {
          if (type === Number) {
            return _.isNumber(actual);
          } else if (type === String) {
            return _.isString(actual);
          } else if (type === Boolean) {
            return _.isBoolean(actual);
          } else {
            return actual instanceof type;
          }
        }
      };
    },
    anything: function() {
      return {
        __matches: function() {
          return true;
        }
      };
    },
    contains: function() {
      var containings, containsAllSpecified;
      containings = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      containsAllSpecified = function(containing, actual) {
        return _.all(containing, function(val, key) {
          if (_.isPlainObject(val)) {
            return containsAllSpecified(val, actual[key]);
          } else {
            return _.eq(val, actual[key]);
          }
        });
      };
      return {
        __matches: function(actual) {
          return _.all(containings, function(containing) {
            if (_.isString(containing)) {
              return _.include(actual, containing);
            } else if (_.isArray(containing)) {
              return _.any(actual, function(actualElement) {
                return _.eq(actualElement, containing);
              });
            } else if (_.isPlainObject(containing)) {
              return containsAllSpecified(containing, actual);
            } else {
              throw new Error("the contains() matcher only supports strings, arrays, and plain objects");
            }
          });
        }
      };
    },
    argThat: function(predicate) {
      return {
        __matches: function(actual) {
          return predicate(actual);
        }
      };
    }
  };

}).call(this);
